import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime
import json
import os

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

DATA_FILE = 'pushup_data.json'

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_today_str():
    return datetime.now().strftime('%Y-%m-%d')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/push <—á–∏—Å–ª–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/log ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥–æ–≤\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/push <—á–∏—Å–ª–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏\n"
        "/stats ‚Äî —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/log ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥–æ–≤"
    )

async def push(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.first_name or user.username or "–ê–Ω–æ–Ω–∏–º"
    args = context.args

    if len(args) != 1 or not args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/push 25")
        return

    count = int(args[0])
    if count <= 0:
        await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    data = load_data()
    today = get_today_str()

    if today not in data:
        data[today] = {}

    if username not in data[today]:
        data[today][username] = []

    data[today][username].append(count)
    save_data(data)

    total_today = sum(data[today][username])

    await update.message.reply_text(
        f"{username}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n"
        f"–ò—Ç–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {total_today} –æ—Ç–∂–∏–º–∞–Ω–∏–π."
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    today = get_today_str()

    if today not in data or not data[today]:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today}:"]
    for user, reps_list in data[today].items():
        total = sum(reps_list)
        done_mark = "‚úÖ" if total >= 100 else "‚ùå"
        lines.append(f"‚Ä¢ {user}: {total} {done_mark}")

    await update.message.reply_text("\n".join(lines))

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    today = get_today_str()

    if today not in data or not data[today]:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    lines = [f"üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥–æ–≤ –∑–∞ {today}:"]
    for user, reps_list in data[today].items():
        reps_str = ", ".join(str(x) for x in reps_list)
        lines.append(f"{user}: {reps_str}")

    await update.message.reply_text("\n".join(lines))


if __name__ == '__main__':
    import asyncio
    from dotenv import load_dotenv
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN")

    if not TOKEN:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")
            exit()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("push", push))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("log", log))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(app.run_polling())
